// ProtectedRoute.tsx

import { Navigate } from 'react-router-dom'
import { useAuth } from '../hooks/useAuth'
import type { Role } from '../constants/roles'
// import { getProfile } from '../../store/authSlice/operations'
import { useEffect } from 'react'
import { useAppDispatch } from '../store/hooks'

interface ProtectedRouteProps {
  children: React.ReactNode
  requiredRoles?: Role[]
  fallback?: React.ReactNode
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({
  children,
  requiredRoles = [],
  fallback = <Navigate to="/login" replace />, // ‚úÖ –î–æ–±–∞–≤–∏—Ç—å replace
}) => {
  const { isAuthenticated, user, accessToken, isLoading, getProfileCall, hasAnyRole } = useAuth()
 console.log('üîê ProtectedRoute check:', { 
    accessToken: !!accessToken, 
    isAuthenticated, 
    user: !!user,
    isLoading 
  })
  useEffect(() => {
    // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    // - –ï—Å—Ç—å accessToken (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω)
    // - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)  
    // - –ù–µ –∏–¥–µ—Ç —É–∂–µ –∑–∞–≥—Ä—É–∑–∫–∞
    if (accessToken && !user && !isLoading) {
      console.log('üì• Loading user profile...')
      getProfileCall()
    }
  }, [accessToken, user, isLoading, getProfileCall])

  if (isLoading) {
    return <div>Loading...</div>
  }

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ:
  if (!accessToken) {
     console.log('‚û°Ô∏è Redirecting to login - no access token')
    return <Navigate to="/login" replace />
  }

  if (!user) {
    console.log('‚è≥ Waiting for user profile...')
    return <div>Loading user data...</div>
  }

  // ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–æ–ª–µ–π
  if (requiredRoles.length > 0 && !hasAnyRole(requiredRoles)) {
    console.log('üö´ Insufficient permissions')
    return fallback
  }
 console.log('‚úÖ Access granted!')
  return children
}

export default ProtectedRoute
