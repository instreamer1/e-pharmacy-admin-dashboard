// import { useState } from 'react'
// import reactLogo from './assets/react.svg'
// import viteLogo from '/vite.svg'
import { Toaster } from 'react-hot-toast'
import './App.css'

import AppRouter from './routes/AppRouter'
import { useEffect } from 'react'

import { useAppDispatch, useAppSelector } from './store/hooks'

import { selectIsRefreshing } from './store/authSlice/selectors'
import { refresh } from './store/authSlice/operations'
import { useAuth } from './hooks/useAuth'

const App = () => {
  console.log('üöÄ App rendered - ONCE') // –î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –û–î–ò–ù —Ä–∞–∑
  const dispatch = useAppDispatch()

  const isRefreshing = useAppSelector(selectIsRefreshing)
  const { accessToken, refreshCall, getProfileCall, isLoading } = useAuth()
  // 1Ô∏è‚É£ Refresh –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    let isMounted = true
    const refreshAccessToken = async () => {
      try {
        if (!accessToken && !isRefreshing && isMounted) {
          console.log('üîÑ Refreshing token...')
          // await dispatch(refresh());
          await refreshCall()
        }
      } catch (error) {
        console.error('‚ùå Token refresh failed:', error)
      }
    }

    refreshAccessToken()
    return () => {
      isMounted = false
    }
  }, []) // —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –∫–æ–≥–¥–∞ —Ç–æ–∫–µ–Ω –ø–æ—è–≤–∏–ª—Å—è
  useEffect(() => {
    if (accessToken) {
      getProfileCall(accessToken)
    }
  }, [accessToken])
  // useEffect(() => {
  //   const initializeAuth = async () => {
  //     try {
  //       // ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ refreshToken (–≤ –∫—É–∫–∞—Ö) –∏ –Ω–µ—Ç –ª–∏ accessToken
  //       // const hasRefreshToken = document.cookie.includes('refreshToken');

  //     if (!accessToken && !isRefreshing) {
  //         console.log('üîÑ Refreshing token...');
  //           await dispatch(refresh())
  //         // await refreshCall();
  //       }

  //       // ‚ö†Ô∏è –í—ã–∑—ã–≤–∞–µ–º getProfile —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –µ—Å—Ç—å
  //       if (accessToken) {
  //         await getProfileCall();
  //       }
  //     } catch (error) {
  //       console.error('‚ùå Token refresh failed:', error);
  //     }
  //   };

  //   initializeAuth();
  // }, []);
  // useEffect(() => {
  //   const initializeAuth = async () => {
  //     try {
  //       // const hasRefreshToken = document.cookie.includes('refreshToken')

  //       // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ï–°–¢–¨ refreshToken –Ω–æ –ù–ï–¢ accessToken
  //       if (!accessToken && !isRefreshing ) {
  //         console.log('üîÑ Refreshing token...')
  //         // await dispatch(refresh())
  //         await refreshCall()
  //       }
  //       getProfileCall()
  //     } catch (error) {
  //       console.error('‚ùå Token refresh failed:', error)
  //     }
  //   }

  //   initializeAuth()
  // }, [])

  // ‚úÖ –ü–æ–∫–∞ –∏–¥–µ—Ç refresh - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º loading
  if (isRefreshing) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div>Refreshing session...</div>
      </div>
    )
  }

  return (
    <>
      <AppRouter />
      <Toaster
        position="top-center"
        toastOptions={{
          duration: 3000,
          style: {
            marginTop: '20px',
            background: '#333',
            color: '#fff',
            borderRadius: '8px',
            padding: '10px 16px',
            fontSize: '14px',
          },
          success: {
            style: {
              background: '#2e7d32',
            },
          },
          error: {
            style: {
              background: '#c62828',
            },
          },
        }}
      />
    </>
  )
}

export default App
